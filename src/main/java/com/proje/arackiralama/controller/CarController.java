package com.proje.arackiralama.controller; // Controller sÄ±nÄ±fÄ±, bu paket iÃ§inde yer alÄ±yor

// Gerekli model ve servis sÄ±nÄ±flarÄ± import ediliyor
import com.proje.arackiralama.model.Booking;
import com.proje.arackiralama.model.Car;
import com.proje.arackiralama.service.BookingService;
import com.proje.arackiralama.service.CarService;

import org.springframework.beans.factory.annotation.Autowired; // Spring baÄŸÄ±mlÄ±lÄ±k enjeksiyonu iÃ§in
import org.springframework.http.*; // HTTP response oluÅŸturmak iÃ§in gerekli sÄ±nÄ±flar
import org.springframework.stereotype.Controller; // Bu sÄ±nÄ±fÄ±n bir Spring MVC Controller olduÄŸunu belirtir
import org.springframework.ui.Model; // Thymeleaf template motoruna veri taÅŸÄ±mak iÃ§in
import org.springframework.ui.ModelMap; // Alternatif model sÄ±nÄ±fÄ±
import org.springframework.web.bind.annotation.*; // Controller'da kullanÄ±lan anotasyonlar
import org.springframework.web.multipart.MultipartFile; // Dosya yÃ¼klemek iÃ§in kullanÄ±lan sÄ±nÄ±f

import java.util.ArrayList;
import java.util.List;

@Controller // Bu sÄ±nÄ±f bir Controller'dÄ±r, URL isteklerini karÅŸÄ±lar
public class CarController {

    @Autowired // Spring, CarService bean'ini otomatik olarak enjekte eder
    private CarService carService;

    @Autowired // BookingService de aynÄ± ÅŸekilde otomatik enjekte edilir
    private BookingService bookingService;

    // ğŸ”½ TÃ¼m araÃ§larÄ± ve onlara ait rezervasyonlarÄ± listele
    @RequestMapping("list-cars")
    public String listAllCars(ModelMap modelMap) {
        List<Car> cars = carService.getAllCars(); // TÃ¼m araÃ§larÄ± getir
        List<Booking> bookings = new ArrayList<>(); // Her araca karÅŸÄ±lÄ±k gelen rezervasyon listesi

        for (Car car : cars) {
            Booking booking = bookingService.getByCarId(car.getId()).orElse(null); // AraÃ§ iÃ§in rezervasyon varsa al
            bookings.add(booking); // Her araÃ§ iÃ§in bir rezervasyon (null olabilir) ekleniyor
        }

        modelMap.put("bookings", bookings); // Booking'ler view'a gÃ¶nderilir
        modelMap.put("cars", cars); // AraÃ§lar view'a gÃ¶nderilir
        return "listCars"; // listCars.html sayfasÄ±na yÃ¶nlendirilir
    }

    // ğŸ”½ KullanÄ±cÄ±nÄ±n koltuk sayÄ±sÄ±na gÃ¶re mÃ¼sait araÃ§larÄ± listelemesi
    @RequestMapping("list-available-cars")
    public String listAllAvailableCarsForBooking(@RequestParam int seatingCapacity, ModelMap modelMap) {
        List<Car> cars = carService.getAvailableCarsByCapacity(seatingCapacity); // Koltuk sayÄ±sÄ±na gÃ¶re uygun araÃ§lar
        modelMap.put("cars", cars); // View'a gÃ¶nder
        return "listCarsAvailableForBooking"; // Uygun araÃ§larÄ± gÃ¶steren sayfa
    }

    // ğŸ”½ Yeni araÃ§ ekleme formunu gÃ¶ster
    @RequestMapping(value = "add-car", method = RequestMethod.GET)
    public String showNewCarPage(Car car) {
        return "car"; // car.html form sayfasÄ±na yÃ¶nlendirilir
    }

    // ğŸ”½ Yeni araÃ§ ekleme iÅŸlemi (form submit edildiÄŸinde Ã§alÄ±ÅŸÄ±r)
    @RequestMapping(value = "add-car", method = RequestMethod.POST)
    public String addNewCar(@ModelAttribute Car car,
                            @RequestParam("imageFile") MultipartFile file, // GÃ¶rsel dosyasÄ± alÄ±nÄ±r
                            Model model) throws Exception {

        // Koltuk kapasitesi kontrolÃ¼ (2, 4 veya 7 olmalÄ±)
        int capacity = car.getSeatingCapacity();
        if (capacity != 2 && capacity != 4 && capacity != 7) {
            model.addAttribute("errorMessage", "Koltuk kapasitesi sadece 2, 4 veya 7 olabilir.");
            model.addAttribute("car", car); // Form verisi geri doldurulsun
            return "car"; // Hata durumunda form ekranÄ±na dÃ¶n
        }

        car.setAvailableForBooking(true); // Yeni eklenen araÃ§ kiralamaya uygun olsun

        // GÃ¶rsel dosya boÅŸ deÄŸilse byte verisi olarak kaydet
        if (!file.isEmpty()) {
            car.setImageData(file.getBytes());
        }

        carService.addCar(car); // AraÃ§ servisiyle veritabanÄ±na ekle
        return "redirect:/list-cars"; // AraÃ§ listesini yenile
    }

    // ğŸ”½ AraÃ§ modeliyle arama yapma
    @GetMapping("/search-cars")
    public String searchCars(@RequestParam(value = "keyword", required = false) String keyword, ModelMap modelMap) {
        List<Car> cars;
        List<Booking> bookings = new ArrayList<>();

        if (keyword != null && !keyword.trim().isEmpty() && keyword.length() >= 2) {
            cars = carService.searchByModel(keyword.trim()); // Model adÄ±na gÃ¶re filtrele
        } else if (keyword != null && keyword.trim().length() < 2) {
            cars = new ArrayList<>(); // KÄ±sa kelime ile arama yapÄ±lmaz
        } else {
            cars = carService.getAllCars(); // TÃ¼m araÃ§lar gÃ¶sterilir
        }

        // Her araÃ§ iÃ§in rezervasyon getir (varsa)
        for (Car car : cars) {
            Booking booking = bookingService.getByCarId(car.getId()).orElse(null);
            bookings.add(booking);
        }

        modelMap.put("cars", cars);
        modelMap.put("bookings", bookings);
        return "listCars"; // listCars.html sayfasÄ± gÃ¶sterilir
    }

    // ğŸ”½ Belirli bir aracÄ± sil
    @RequestMapping(value = "delete-car")
    public String deleteCar(@RequestParam int id) {
        carService.deleteById(id); // ID ile sil
        return "redirect:/list-cars"; // Listeye geri dÃ¶n
    }

    // ğŸ”½ VeritabanÄ±ndaki araÃ§ resmini kullanÄ±cÄ±ya gÃ¶stermek iÃ§in binary veri dÃ¶ndÃ¼r
    @GetMapping("/car-image/{id}")
    @ResponseBody // JSON yerine doÄŸrudan byte[] dÃ¶ner
    public ResponseEntity<byte[]> getCarImage(@PathVariable int id) {
        Car car = carService.getCar(id); // AracÄ± getir
        if (car == null || car.getImageData() == null) {
            return ResponseEntity.notFound().build(); // Resim yoksa 404
        }

        HttpHeaders headers = new HttpHeaders(); // HTTP header tanÄ±mÄ±
        headers.setContentType(MediaType.IMAGE_JPEG); // JPEG olarak belirt
        return new ResponseEntity<>(car.getImageData(), headers, HttpStatus.OK); // Resmi ve header'larÄ± dÃ¶n
    }

    // ğŸ”½ KullanÄ±cÄ± iÃ§in araÃ§ talep formunu gÃ¶ster
    @GetMapping("/car-request-form")
    public String showCarRequestForm(@RequestParam("carId") int carId, ModelMap model) {
        model.put("carId", carId); // carId'yi forma gÃ¶nder
        return "carRequestForm"; // formun HTML sayfasÄ±
    }
}
