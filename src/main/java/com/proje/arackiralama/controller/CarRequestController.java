package com.proje.arackiralama.controller; // Controller sÄ±nÄ±fÄ± bu pakette tanÄ±mlanmÄ±ÅŸ

// Gerekli model ve servis sÄ±nÄ±flarÄ± import ediliyor
import com.proje.arackiralama.model.*;
import com.proje.arackiralama.service.BookingService;
import com.proje.arackiralama.service.CarRequestService;
import com.proje.arackiralama.service.CarService;
import com.proje.arackiralama.service.DriverService;

import org.springframework.beans.factory.annotation.Autowired; // Springâ€™in otomatik bean enjeksiyonu iÃ§in
import org.springframework.stereotype.Controller; // SÄ±nÄ±fÄ±n bir controller olduÄŸunu belirtir
import org.springframework.ui.Model; // Viewâ€™a veri aktarmak iÃ§in
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.*; // Mapping anotasyonlarÄ± iÃ§in
import org.springframework.web.servlet.mvc.support.RedirectAttributes; // Redirect sÄ±rasÄ±nda mesaj taÅŸÄ±ma iÃ§in

import java.time.LocalDate; // Tarih bilgisi iÃ§in
import java.util.List;
import java.util.Optional;

@Controller // Spring MVC Controller olarak iÅŸaretlenir
public class CarRequestController {

    // Gerekli servisler enjekte ediliyor
    @Autowired
    private CarRequestService carRequestService;

    @Autowired
    private CarService carService;

    @Autowired
    private DriverService driverService;

    @Autowired
    private BookingService bookingService;

    // ğŸ”½ Talebi onayla â†’ AraÃ§ ve sÃ¼rÃ¼cÃ¼ atanÄ±r, rezervasyon oluÅŸturulur
    @RequestMapping("approve-request")
    public String approveDriverRequest(@RequestParam int requestId,
                                       @RequestParam int driverId,
                                       @RequestParam int carId,
                                       Model model) {

        Driver driver = driverService.getDriver(driverId); // SÃ¼rÃ¼cÃ¼ bilgisi Ã§ekilir
        if (driver == null) {
            model.addAttribute("errorMessage", "SeÃ§ilen sÃ¼rÃ¼cÃ¼ bulunamadÄ±. ID: " + driverId);
            return "car-requests"; // Hata varsa tekrar form ekranÄ±na dÃ¶n
        }

        Car car = carService.getCar(carId); // AraÃ§ bilgisi Ã§ekilir
        if (car == null) {
            model.addAttribute("errorMessage", "SeÃ§ilen araÃ§ bulunamadÄ±. ID: " + carId);
            return "car-requests";
        }

        Optional<CarRequest> optionalRequest = carRequestService.getRequestById(requestId); // Talep bulunur
        if (optionalRequest.isEmpty()) {
            model.addAttribute("errorMessage", "AraÃ§ talebi bulunamadÄ±. ID: " + requestId);
            return "car-requests";
        }

        // ğŸ”„ Talep gÃ¼ncellenir
        CarRequest carRequest = optionalRequest.get();
        carRequest.setRequestStatus("ONAYLANDI");
        carRequestService.saveRequest(carRequest);

        // ğŸ”„ AraÃ§ gÃ¼ncellenir
        car.setDriverId(driverId);
        car.setAvailableForBooking(false); // ArtÄ±k kiralanamaz
        car.setBookingDate(LocalDate.now()); // Rezervasyon tarihi bugÃ¼nÃ¼n tarihi olur
        carService.addCar(car);

        // ğŸ”„ SÃ¼rÃ¼cÃ¼ gÃ¼ncellenir
        driver.setAssignedCarId(carId);
        driverService.saveDriver(driver);

        // ğŸ”„ Booking (rezervasyon) oluÅŸturulur
        Booking booking = new Booking(carId, driverId, driver.getUsername(), LocalDate.now());
        bookingService.saveBooking(booking);

        return "redirect:/list-car-requests"; // Talepler listesine geri dÃ¶n
    }

    // ğŸ”½ Talebi reddet
    @RequestMapping("reject-request")
    public String rejectDriverRequest(@RequestParam int requestId, Model model) {

        Optional<CarRequest> optionalRequest = carRequestService.getRequestById(requestId);
        if (optionalRequest.isEmpty()) {
            model.addAttribute("errorMessage", "Talep bulunamadÄ±. ID: " + requestId);
            return "car-requests"; // Hata varsa ekrana dÃ¶n
        }

        // Talep durumu REDDEDÄ°LDÄ° yapÄ±lÄ±r
        CarRequest carRequest = optionalRequest.get();
        carRequest.setRequestStatus("REDDEDÄ°LDÄ°");
        carRequestService.saveRequest(carRequest);

        return "redirect:/list-car-requests"; // Listeye yÃ¶nlendir
    }

    // ğŸ”½ TÃ¼m talepleri sil (admin iÅŸlemi)
    @RequestMapping("delete-car-requests")
    public String deleteAllCarRequests() {
        carRequestService.deleteAllRequests(); // TÃ¼m kayÄ±tlar silinir
        return "redirect:/list-car-requests";
    }

    // ğŸ”½ TÃ¼m talepleri listele (admin sayfasÄ± gibi)
    @RequestMapping("list-car-requests")
    public String listAllCarRequests(ModelMap modelMap) {
        List<CarRequest> carRequests = carRequestService.getAllRequests(); // TÃ¼m talepler Ã§ekilir
        modelMap.put("car_requests", carRequests); // Viewâ€™a gÃ¶nderilir
        return "listCarRequests"; // listCarRequests.html sayfasÄ±
    }

    // ğŸ”½ KullanÄ±cÄ± formdan yeni araÃ§ talep ettiÄŸinde Ã§alÄ±ÅŸÄ±r
    @PostMapping("/submit-car-request")
    public String submitCarRequest(@RequestParam int carId,
                                   @RequestParam String username,
                                   @RequestParam String tcNo,
                                   RedirectAttributes redirectAttributes) {

        Driver driver = driverService.getDriverByTcNo(tcNo); // TC ile sÃ¼rÃ¼cÃ¼ aramasÄ± yapÄ±lÄ±r

        if (driver == null) {
            // EÄŸer sÃ¼rÃ¼cÃ¼ yoksa yeni bir sÃ¼rÃ¼cÃ¼ oluÅŸturulur
            driver = new Driver();
            driver.setUsername(username);
            driver.setTcNo(tcNo);
            driverService.saveDriver(driver);
        }

        // SÃ¼rÃ¼cÃ¼nÃ¼n mevcutta bir bookingâ€™i varsa tekrar talep oluÅŸturamaz
        boolean alreadyHasBooking = bookingService.getByDriverId(driver.getId()).isPresent();
        if (alreadyHasBooking) {
            redirectAttributes.addFlashAttribute("error", "Bu sÃ¼rÃ¼cÃ¼ zaten bir araÃ§ kiralamÄ±ÅŸ.");
            return "redirect:/car-request-form?carId=" + carId;
        }

        // Talep nesnesi oluÅŸturulur
        CarRequest request = new CarRequest();
        request.setCarId(carId);
        request.setDriverId(driver.getId());
        request.setRequestStatus("BEKLÄ°YOR"); // BaÅŸlangÄ±Ã§ durumu

        carRequestService.saveRequest(request); // Talep kaydedilir
        return "redirect:/"; // Ana sayfaya yÃ¶nlendirilir
    }
}
